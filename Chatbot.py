import os
import telebot
from telebot import types
import database
import requests

# üîë –¢–≤–æ–∏ –∫–ª—é—á–∏
TOKEN = "8240275661:AAFXDbOJj8Kqw0cTJKqDZJWSS9BXE7i-E_A"
YANDEX_API_KEY = "demo_yandex_weather_api_key_ca6d09349ba0"

bot = telebot.TeleBot(TOKEN)


# üß≠ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (–Ω–∏–∂–Ω–∏–µ –∫–Ω–æ–ø–∫–∏)
def main_menu():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.row("üèô –î–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏", "‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ")
    keyboard.row("üå§ –ü–æ–≥–æ–¥–∞", "üó∫ –ö–∞—Ä—Ç–∞ –°–∞–º–∞—Ä—ã", "‚ÑπÔ∏è –ü–æ–º–æ—â—å")
    return keyboard


# üîπ –ö–æ–º–∞–Ω–¥–∞ /start
@bot.message_handler(commands=['start'])
def start(message):
    database.add_user(message.from_user.id, message.from_user.username)
    bot.send_message(
        message.chat.id,
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø —Ä–∞—Å—Å–∫–∞–∂—É —Ç–µ–±–µ –æ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—è—Ö –°–∞–º–∞—Ä—ã.\n\n"
        "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ üëá",
        reply_markup=main_menu()
    )


# üîπ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(content_types=['text'])
def handle_text(message):
    text = message.text.lower()

    # –î–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    if "–¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏" in text:
        places = database.get_places()
        if not places:
            bot.send_message(message.chat.id, "‚ö†Ô∏è –í –±–∞–∑–µ –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π.")
            return

        keyboard = types.InlineKeyboardMarkup()
        for place in places:
            # place = (id, name, description, photo_path, lat, lon)
            keyboard.add(types.InlineKeyboardButton(text=place[1], callback_data=f"place_{place[0]}"))

        bot.send_message(
            message.chat.id,
            "üìç –í—ã–±–µ—Ä–∏ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å:",
            reply_markup=keyboard
        )

    # –ò–∑–±—Ä–∞–Ω–Ω–æ–µ
    elif "–∏–∑–±—Ä–∞–Ω–Ω–æ–µ" in text:
        favorites = database.get_favorites(message.from_user.id)
        if favorites:
            text = "\n\n".join([f"‚≠ê {f[0]} ‚Äî {f[1]}" for f in favorites])
            bot.send_message(message.chat.id, f"–¢–≤–æ–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –º–µ—Å—Ç–∞:\n\n{text}")
        else:
            bot.send_message(message.chat.id, "–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –º–µ—Å—Ç üòî")

    # –ü–æ–≥–æ–¥–∞
    elif "–ø–æ–≥–æ–¥–∞" in text:
        send_weather(message.chat.id)

    # –ö–∞—Ä—Ç–∞ –°–∞–º–∞—Ä—ã
    elif "–∫–∞—Ä—Ç–∞" in text:
        bot.send_message(
            message.chat.id,
            "üó∫ –í–æ—Ç –∫–∞—Ä—Ç–∞ –°–∞–º–∞—Ä—ã –≤ Google Maps:\nhttps://www.google.com/maps/place/–°–∞–º–∞—Ä–∞"
        )

    # –ü–æ–º–æ—â—å
    elif "–ø–æ–º–æ—â—å" in text:
        bot.send_message(
            message.chat.id,
            "‚ÑπÔ∏è –Ø –±–æ—Ç-–≥–∏–¥ –ø–æ –°–∞–º–∞—Ä–µ!\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–Ω–æ–ø–∫–∏:\n"
            "üèô –î–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ ‚Äî —Å–ø–∏—Å–æ–∫ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –º–µ—Å—Ç\n"
            "‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ ‚Äî —Ç–≤–æ–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –º–µ—Å—Ç–∞\n"
            "üå§ –ü–æ–≥–æ–¥–∞ ‚Äî —Ç–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞ –≤ –°–∞–º–∞—Ä–µ\n"
            "üó∫ –ö–∞—Ä—Ç–∞ –°–∞–º–∞—Ä—ã ‚Äî –æ—Ç–∫—Ä–æ–µ—Ç –∫–∞—Ä—Ç—É –≥–æ—Ä–æ–¥–∞"
        )

    else:
        bot.send_message(message.chat.id, "–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—é üòÖ\n–í—ã–±–µ—Ä–∏ –ø—É–Ω–∫—Ç –º–µ–Ω—é –Ω–∏–∂–µ.", reply_markup=main_menu())


# üîπ Callback ‚Äî –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
@bot.callback_query_handler(func=lambda call: call.data.startswith('place_'))
def callback_place(call):
    place_id = int(call.data.split('_')[1])
    conn = database.get_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM places WHERE id=?", (place_id,))
    place = cursor.fetchone()

    if place:
        markup = types.InlineKeyboardMarkup()
        markup.add(
            types.InlineKeyboardButton("‚≠ê –í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data=f"fav_{place_id}"),
            types.InlineKeyboardButton("üìç –û—Ç–∫—Ä—ã—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ", url=f"https://www.google.com/maps?q={place[4]},{place[5]}")
        )

        if place[3] and os.path.exists(place[3]):
            with open(place[3], 'rb') as photo:
                bot.send_photo(call.message.chat.id, photo, caption=f"{place[1]}\n\n{place[2]}", reply_markup=markup)
        else:
            bot.send_message(call.message.chat.id, f"{place[1]}\n\n{place[2]}", reply_markup=markup)

    else:
        bot.send_message(call.message.chat.id, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Å—Ç–µ.")


# üîπ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
@bot.callback_query_handler(func=lambda call: call.data.startswith('fav_'))
def callback_favorite(call):
    place_id = int(call.data.split('_')[1])
    database.add_favorite(call.from_user.id, place_id)
    bot.send_message(call.message.chat.id, "‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!")


# üîπ –ü–æ–∫–∞–∑ –ø–æ–≥–æ–¥—ã
def send_weather(chat_id):
    try:
        url = "https://api.weather.yandex.ru/v2/forecast"
        params = {"lat": 53.1959, "lon": 50.1008, "lang": "ru_RU"}
        headers = {"X-Yandex-Weather-Key": YANDEX_API_KEY}
        response = requests.get(url, params=params, headers=headers)
        data = response.json()

        temp = data["fact"]["temp"]
        feels_like = data["fact"]["feels_like"]
        condition = data["fact"]["condition"]

        conditions = {
            "clear": "‚òÄÔ∏è —è—Å–Ω–æ",
            "partly-cloudy": "üå§ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å",
            "cloudy": "‚òÅÔ∏è –æ–±–ª–∞—á–Ω–æ",
            "overcast": "üå• –ø–∞—Å–º—É—Ä–Ω–æ",
            "rain": "üåß –¥–æ–∂–¥—å",
            "snow": "‚ùÑÔ∏è —Å–Ω–µ–≥",
        }

        text = (
            f"üå§ –ü–æ–≥–æ–¥–∞ –≤ –°–∞–º–∞—Ä–µ:\n\n"
            f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C\n"
            f"–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: {feels_like}¬∞C\n"
            f"–°–æ—Å—Ç–æ—è–Ω–∏–µ: {conditions.get(condition, condition)}"
        )
        bot.send_message(chat_id, text)

    except Exception as e:
        bot.send_message(chat_id, f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É.\n–û—à–∏–±–∫–∞: {e}")


# üîπ –ó–∞–ø—É—Å–∫
bot.polling(none_stop=True)
